//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace allseen { namespace LSF { namespace ControllerService { namespace Scene {

ref class SceneSignals;

public interface class ISceneSignals
{
    event Windows::Foundation::TypedEventHandler<SceneSignals^, SceneScenesAppliedReceivedEventArgs^>^ ScenesAppliedReceived;
    event Windows::Foundation::TypedEventHandler<SceneSignals^, SceneScenesCreatedReceivedEventArgs^>^ ScenesCreatedReceived;
    event Windows::Foundation::TypedEventHandler<SceneSignals^, SceneScenesDeletedReceivedEventArgs^>^ ScenesDeletedReceived;
    event Windows::Foundation::TypedEventHandler<SceneSignals^, SceneScenesNameChangedReceivedEventArgs^>^ ScenesNameChangedReceived;
    event Windows::Foundation::TypedEventHandler<SceneSignals^, SceneScenesUpdatedReceivedEventArgs^>^ ScenesUpdatedReceived;
};

public ref class SceneSignals sealed : [Windows::Foundation::Metadata::Default] ISceneSignals
{
public:
    // Calling this method will send the ScenesApplied signal to every member of the session.
    void ScenesApplied(_In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberSceneIDs);

    // This event fires whenever the ScenesApplied signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<SceneSignals^, SceneScenesAppliedReceivedEventArgs^>^ ScenesAppliedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SceneSignals^, SceneScenesAppliedReceivedEventArgs^>^ handler) 
        { 
            return _ScenesAppliedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SceneSignals^>(sender), safe_cast<SceneScenesAppliedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ScenesAppliedReceived -= token; 
        } 
    internal: 
        void raise(SceneSignals^ sender, SceneScenesAppliedReceivedEventArgs^ args) 
        { 
            _ScenesAppliedReceived(sender, args);
        } 
    }

    // Calling this method will send the ScenesCreated signal to every member of the session.
    void ScenesCreated(_In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberSceneIDs);

    // This event fires whenever the ScenesCreated signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<SceneSignals^, SceneScenesCreatedReceivedEventArgs^>^ ScenesCreatedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SceneSignals^, SceneScenesCreatedReceivedEventArgs^>^ handler) 
        { 
            return _ScenesCreatedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SceneSignals^>(sender), safe_cast<SceneScenesCreatedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ScenesCreatedReceived -= token; 
        } 
    internal: 
        void raise(SceneSignals^ sender, SceneScenesCreatedReceivedEventArgs^ args) 
        { 
            _ScenesCreatedReceived(sender, args);
        } 
    }

    // Calling this method will send the ScenesDeleted signal to every member of the session.
    void ScenesDeleted(_In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberSceneIDs);

    // This event fires whenever the ScenesDeleted signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<SceneSignals^, SceneScenesDeletedReceivedEventArgs^>^ ScenesDeletedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SceneSignals^, SceneScenesDeletedReceivedEventArgs^>^ handler) 
        { 
            return _ScenesDeletedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SceneSignals^>(sender), safe_cast<SceneScenesDeletedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ScenesDeletedReceived -= token; 
        } 
    internal: 
        void raise(SceneSignals^ sender, SceneScenesDeletedReceivedEventArgs^ args) 
        { 
            _ScenesDeletedReceived(sender, args);
        } 
    }

    // Calling this method will send the ScenesNameChanged signal to every member of the session.
    void ScenesNameChanged(_In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberSceneIDs);

    // This event fires whenever the ScenesNameChanged signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<SceneSignals^, SceneScenesNameChangedReceivedEventArgs^>^ ScenesNameChangedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SceneSignals^, SceneScenesNameChangedReceivedEventArgs^>^ handler) 
        { 
            return _ScenesNameChangedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SceneSignals^>(sender), safe_cast<SceneScenesNameChangedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ScenesNameChangedReceived -= token; 
        } 
    internal: 
        void raise(SceneSignals^ sender, SceneScenesNameChangedReceivedEventArgs^ args) 
        { 
            _ScenesNameChangedReceived(sender, args);
        } 
    }

    // Calling this method will send the ScenesUpdated signal to every member of the session.
    void ScenesUpdated(_In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberSceneIDs);

    // This event fires whenever the ScenesUpdated signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<SceneSignals^, SceneScenesUpdatedReceivedEventArgs^>^ ScenesUpdatedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SceneSignals^, SceneScenesUpdatedReceivedEventArgs^>^ handler) 
        { 
            return _ScenesUpdatedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SceneSignals^>(sender), safe_cast<SceneScenesUpdatedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ScenesUpdatedReceived -= token; 
        } 
    internal: 
        void raise(SceneSignals^ sender, SceneScenesUpdatedReceivedEventArgs^ args) 
        { 
            _ScenesUpdatedReceived(sender, args);
        } 
    }

internal:
    void Initialize(_In_ alljoyn_busobject busObject, _In_ alljoyn_sessionid sessionId);
    void CallScenesAppliedReceived(_In_ SceneSignals^ sender, _In_ SceneScenesAppliedReceivedEventArgs^ args);
    void CallScenesCreatedReceived(_In_ SceneSignals^ sender, _In_ SceneScenesCreatedReceivedEventArgs^ args);
    void CallScenesDeletedReceived(_In_ SceneSignals^ sender, _In_ SceneScenesDeletedReceivedEventArgs^ args);
    void CallScenesNameChangedReceived(_In_ SceneSignals^ sender, _In_ SceneScenesNameChangedReceivedEventArgs^ args);
    void CallScenesUpdatedReceived(_In_ SceneSignals^ sender, _In_ SceneScenesUpdatedReceivedEventArgs^ args);

private:
    alljoyn_busobject m_busObject;
    alljoyn_sessionid m_sessionId;

    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _ScenesAppliedReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _ScenesCreatedReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _ScenesDeletedReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _ScenesNameChangedReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _ScenesUpdatedReceived;

    alljoyn_interfacedescription_member m_memberScenesApplied;
    alljoyn_interfacedescription_member m_memberScenesCreated;
    alljoyn_interfacedescription_member m_memberScenesDeleted;
    alljoyn_interfacedescription_member m_memberScenesNameChanged;
    alljoyn_interfacedescription_member m_memberScenesUpdated;
};

} } } } } 
