//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#include "pch.h"

using namespace Microsoft::WRL;
using namespace Platform;
using namespace Windows::Foundation;
using namespace Windows::Foundation::Collections;
using namespace Windows::Devices::AllJoyn;
using namespace org::allseen::LSF::ControllerService::Scene;

// Note: Unlike an Interface implementation, which provides a single handler for each member, the event
// model allows for 0 or more listeners to be registered. The EventAdapter implementation deals with this
// difference by implementing a last-writer-wins policy. The lack of any return value (i.e., 0 listeners)
// is handled by returning a null result.

// Methods
IAsyncOperation<SceneApplySceneResult^>^ SceneServiceEventAdapter::ApplySceneAsync(_In_ AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberSceneID)
{
    auto args = ref new SceneApplySceneCalledEventArgs(info, interfaceMemberSceneID);
    ApplySceneCalled(this, args);
    return SceneApplySceneCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<SceneCreateSceneResult^>^ SceneServiceEventAdapter::CreateSceneAsync(_In_ AllJoynMessageInfo^ info, _In_ Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToStateItem^>^ interfaceMemberTransitionlampsLampGroupsToState, _In_ Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToPresetItem^>^ interfaceMemberTransitionlampsLampGroupsToPreset, _In_ Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithStateItem^>^ interfaceMemberPulselampsLampGroupsWithState, _In_ Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithPresetItem^>^ interfaceMemberPulselampsLampGroupsWithPreset, _In_ Platform::String^ interfaceMemberSceneName, _In_ Platform::String^ interfaceMemberLanguage)
{
    auto args = ref new SceneCreateSceneCalledEventArgs(info, interfaceMemberTransitionlampsLampGroupsToState, interfaceMemberTransitionlampsLampGroupsToPreset, interfaceMemberPulselampsLampGroupsWithState, interfaceMemberPulselampsLampGroupsWithPreset, interfaceMemberSceneName, interfaceMemberLanguage);
    CreateSceneCalled(this, args);
    return SceneCreateSceneCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<SceneDeleteSceneResult^>^ SceneServiceEventAdapter::DeleteSceneAsync(_In_ AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberSceneID)
{
    auto args = ref new SceneDeleteSceneCalledEventArgs(info, interfaceMemberSceneID);
    DeleteSceneCalled(this, args);
    return SceneDeleteSceneCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<SceneGetAllSceneIDsResult^>^ SceneServiceEventAdapter::GetAllSceneIDsAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new SceneGetAllSceneIDsCalledEventArgs(info);
    GetAllSceneIDsCalled(this, args);
    return SceneGetAllSceneIDsCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<SceneGetSceneResult^>^ SceneServiceEventAdapter::GetSceneAsync(_In_ AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberSceneID)
{
    auto args = ref new SceneGetSceneCalledEventArgs(info, interfaceMemberSceneID);
    GetSceneCalled(this, args);
    return SceneGetSceneCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<SceneGetSceneNameResult^>^ SceneServiceEventAdapter::GetSceneNameAsync(_In_ AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberSceneID, _In_ Platform::String^ interfaceMemberLanguage)
{
    auto args = ref new SceneGetSceneNameCalledEventArgs(info, interfaceMemberSceneID, interfaceMemberLanguage);
    GetSceneNameCalled(this, args);
    return SceneGetSceneNameCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<SceneSetSceneNameResult^>^ SceneServiceEventAdapter::SetSceneNameAsync(_In_ AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberSceneID, _In_ Platform::String^ interfaceMemberSceneName, _In_ Platform::String^ interfaceMemberLanguage)
{
    auto args = ref new SceneSetSceneNameCalledEventArgs(info, interfaceMemberSceneID, interfaceMemberSceneName, interfaceMemberLanguage);
    SetSceneNameCalled(this, args);
    return SceneSetSceneNameCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<SceneUpdateSceneResult^>^ SceneServiceEventAdapter::UpdateSceneAsync(_In_ AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberSceneID, _In_ Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToStateItem^>^ interfaceMemberTransitionlampsLampGroupsToState, _In_ Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToPresetItem^>^ interfaceMemberTransitionlampsLampGroupsToPreset, _In_ Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithStateItem^>^ interfaceMemberPulselampsLampGroupsWithState, _In_ Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithPresetItem^>^ interfaceMemberPulselampsLampGroupsWithPreset)
{
    auto args = ref new SceneUpdateSceneCalledEventArgs(info, interfaceMemberSceneID, interfaceMemberTransitionlampsLampGroupsToState, interfaceMemberTransitionlampsLampGroupsToPreset, interfaceMemberPulselampsLampGroupsWithState, interfaceMemberPulselampsLampGroupsWithPreset);
    UpdateSceneCalled(this, args);
    return SceneUpdateSceneCalledEventArgs::GetResultAsync(args);
}

// Property Reads
IAsyncOperation<SceneGetVersionResult^>^ SceneServiceEventAdapter::GetVersionAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new SceneGetVersionRequestedEventArgs(info);
    GetVersionRequested(this, args);
    return SceneGetVersionRequestedEventArgs::GetResultAsync(args);
}

// Property Writes
